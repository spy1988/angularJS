AngularJS简介
	我们创造惊人的基于WEB应用程序的能力是令人难以置信，然而构造这些应用程序的复杂性也同样令人难以置信。Angular团队想减轻使用AJAX开发应用程序的痛苦。在Google，我们曾经经历过构建像Gmail，Maps，Calendar和其他大型WEB应用程序的沉痛教训。我们认为我们有能力利用这些经验，让每个人受益。
	我们希望编写WEB应用程序就像我们第一次写几行代码，然后对我们所做的愣住了。我们希望编程的过程就像在创造，而不是尝试着去满足WEB浏览器各种奇怪的内部机制。
	同时，我们希望有一个环境，能够帮助我们决策，使应用程序容易创建，并从一开始就能够理解，随着项目的变大，能够继续正确的策略使应用程序容易测试、扩展和维护。
	我们已经在Angular框架中尝试做到了这点。对于我们达到的成就十分兴奋。许多功劳归功于开源社区，Angular周围的人在互相支持上做了出色的工作，教会了我们很多东西。我们希望你能够加入我们社区，帮助我们了解如何让Angular更好。
	一些更大和更多相关的例子和代码片段在GitHub仓库，你可以查看、做个分支，并在我们的GitHub 页面上玩弄。


概念
	在整个Angular应用，你会用到几个核心理念。事实证明，我们没有创造任何东西。相反，我们大量借鉴了其他开发环境中的成功语录，并通过拥抱HTML，浏览器和其他常见的WEB标准的方法实现了它们。

客户端模板
	多页面WEB应用程序通过组装和拼接服务器上的数据来创造它们的HTML，然后将完成的页面输送给浏览器。某种程度上，绝大部分单页面应用（也被称为AJAX应用）同样做到了。Angular不同于它的是，传递模板和数据到浏览器，然后在浏览器端组装。服务器的角色变成了只提供模板的静态资源和提供模板所需要的数据。
	让我们来看一个例子，在浏览器端如何用Angular组装数据和模板。我们举个Hello world的例子，而不是输出Hello world字符换，然后组织可以改变的“hello”。
	因此，在hello.html建立了模板：
<html ng-app>
<head>
<script src="angular.js"></script>
<script src="controllers.js"></script>
</head>
<body>
<div ng-controller='HelloController'>
<p>{{greeting.text}}, World</p>
</div>
</body>
</html>

浏览器加载hello.html页面，产生如图1-1所示
 
图1-1 Hello World

和当前使用的绝大多数方法相比，需要注意一些有趣的东西：
	在HTML中没有classes或者IDs来区分绑定的事件监听器。
	当HelloController设置greeting.text为hello时，我们并没有注册任何事件监听器和写任何回调函数。
	HelloController是一个普通的JavaScript类，并没有继承来Angular提供的任何东西。
	HelloController获取它需要的$scope对象，而没有必要创建它。
	我们没有必要调用HelloController的构造函数，或者计算出何时调用他们。

	很快，我们将会看到更多的不同，但是有一点很清晰的是，Angular应用组织结构非常不同于以前类似的应用。
	为什么指定这种决策以及Angular如何运行的？让我们看看一些Angular从别的地方偷来的建议。

模型 视图 控制器(MVC)
	在20世纪70年代引入了MVC应用结构作为Smalltalk的一部分。从Smalltalk开始，MVC在涉及用户界面的桌面开发环境中变的很流行。无论你使用C++，java，Object-c，都有有MVC的风格。然而，直到最近几年，MVC才是WEB开发的全部。
	MVC背后的核心理念就是，你在你的代码之间明确分离管理数据（模型），应用程序逻辑（控制器），并将数据给用户（视图）。
	视图从模型中获取数据展示给用户。当用户通过点击或者输入和应用程序进行交互时，控制器通过改变模型中的数据响应。最终，模型层通知视图层，已经发生改变，一边更新显示。
	在Angular应用中，视图层就是DOM，控制器就JavaScript类，模型数据存储在对象属性中。
	我们认为，MVC是整齐的几个原因。首先，它更够给你一个内心的模型用来存放什么，因此你不需要重复造轮子。你们项目中的其他人，由于知道使用了MVC结构组织代码，因此很容易的理解你所写的。可能最重要的是，带来了巨大的利益，是有应用程序更容易扩展、维护、和测试。

数据绑定
在AJAX之前，单页面应用是常见的，想Rails，PHP，JSP等平台通过合并HTML字符串和发送给用户展示的数据来创建用户界面。
	像jQuery库这种扩展到客户端的模式，让我们遵循相似的风格，但由于有更新的能力， 单独地DOM的部分，而不是更新整个页面。这里，我们合并HTML字符串和数据，然后通过元素上设置innerhtml将结果插入到我们所想要的DOM中。
	这一切都运行的相当好，但是当你想将新数据插入到界面，或者改变基于用户输入的数据时，你需要做很多又不是价值不高的工作，来确保同时在界面和JavaScript属性中获取的数据是正确的状态。
	但是，倘若我们有什么东西把这些工作都为我们做好了，同时不需要写代码？倘若我能仅仅声明界面的某一部分映射到JavaScript的属性，让他们自动的同步？这种编程方式叫做数据绑定。我们在Angular中包括这种功能，因为当编写视图和模型时，使用MVC来消除代码那是非常棒的。移动数据从一个地方到另外一个地方的绝大部分工作是自动发生的。
	为了要看到这种效果，让我们做第一个例子，并让他动起来。之前，Hello Controllery一开始设置了greeting.text模型，之后就没有改变过。为了让它‘活起来’，让我们增加一个文本输入框改变示例，随着用户的额输入改变greeting.text的值。
	这里是新的模板：
<html ng-app>
<head>
<script src="angular.js"></script>
<script src="controllers.js"></script>
</head>
<body>
<div ng-controller='HelloController'>
<input ng-model='greeting.text'>
<p>{{greeting.text}}, World</p>
</div>
</body>
</html>

控制器HellControler，可以完全相同。
浏览器加载后，将看到图1-2中的截图：
 
图1-2 greeting应用的默认状态。

如果我们用Hi取代输入框中的Hello，将看到图1-3中的截图：

 
图1-3 Greeting应用输入框改变后。


